plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "com.gorylenko.gradle-git-properties" version "1.5.1"
	id 'org.unbroken-dome.xjc' version '2.0.0'
}

xjc {
	xjcVersion = '3.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
    configureEach {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

dependencies {
	implementation 'javax.annotation:javax.annotation-api:1.3.2'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'org.springframework.boot:spring-boot-starter-cache'

	implementation 'com.github.ben-manes.caffeine:caffeine'

	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
	implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.4'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.postgresql:postgresql:42.7.3'

	implementation 'org.apache.httpcomponents:httpclient:4.5.14'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.mockito:mockito-core:5.2.0'

	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final' // AFTER LOMBOK
}

tasks.named('test') {
	useJUnitPlatform()
}

springBoot {
	buildInfo()
}

xjcGenerate {
	source = fileTree('src/main/resources/xsd') {
		include '*.xsd'
	}
	outputDirectory = file('build/generated-sources/xjc')
	bindingFiles = files('src/main/resources/xsd/bindings.xjb')
}

// Task to build the dashboard using npm

def dashboardDir = '../dashboard'
def buildOutputDir = "${dashboardDir}/build/client"
def staticTargetDir = "${projectDir}/src/main/resources/static"

tasks.register('npmInstallDashboard', Exec) {
	workingDir dashboardDir
	commandLine 'npm', 'install'
}

tasks.register('npmBuildDashboard', Exec) {
	workingDir dashboardDir
	commandLine 'npm', 'run', 'build'
	dependsOn 'npmInstallDashboard'
}

tasks.register('deleteStaticDir', Delete) {
	delete staticTargetDir
}

tasks.register('copyDashboardBuild', Copy) {
	from buildOutputDir
	into staticTargetDir
	dependsOn 'npmBuildDashboard', 'deleteStaticDir'
}

// Ensure static files are ready before building the server
if (project.hasProperty('buildDashboard')) {
	tasks.named('processResources') {
		dependsOn 'copyDashboardBuild'
	}
}